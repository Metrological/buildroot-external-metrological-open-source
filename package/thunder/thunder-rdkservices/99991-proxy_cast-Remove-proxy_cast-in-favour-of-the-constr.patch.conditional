From 91bddc00f94262ba4cb14ca0be0c575251f1b99c Mon Sep 17 00:00:00 2001
From: Bram Oosterhuis <bram.oosterhuis.nl@gmail.com>
Date: Tue, 26 Oct 2021 02:23:36 +0200
Subject: [PATCH] [proxy_cast] Remove proxy_cast in favour of the constructor

---
 DeviceInfo/DeviceInfo.cpp                           | 2 +-
 DisplayInfo/DisplayInfo.cpp                         | 2 +-
 LocationSync/LocationService.cpp                    | 2 +-
 LocationSync/LocationSync.cpp                       | 2 +-
 Monitor/Monitor.cpp                                 | 6 +++---
 PlayerInfo/PlayerInfo.cpp                           | 2 +-
 SystemAudioPlayer/SystemAudioPlayerImplementation.h | 2 +-
 TextToSpeech/TextToSpeechImplementation.h           | 2 +-
 TraceControl/TraceControl.cpp                       | 2 +-
 WebBridge/WebBridge.cpp                             | 2 +-
 10 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/DeviceInfo/DeviceInfo.cpp b/DeviceInfo/DeviceInfo.cpp
index 1398375..8363c92 100644
--- a/DeviceInfo/DeviceInfo.cpp
+++ b/DeviceInfo/DeviceInfo.cpp
@@ -103,7 +103,7 @@ namespace Plugin {
             // TODO RB: I guess we should do something here to return other info (e.g. time) as well.
 
             result->ContentType = Web::MIMETypes::MIME_JSON;
-            result->Body(Core::proxy_cast<Web::IBody>(response));
+            result->Body(Core::ProxyType<Web::IBody>(response));
         } else {
             result->ErrorCode = Web::STATUS_BAD_REQUEST;
             result->Message = _T("Unsupported request for the [DeviceInfo] service.");
diff --git a/DisplayInfo/DisplayInfo.cpp b/DisplayInfo/DisplayInfo.cpp
index e474698..d800c2e 100644
--- a/DisplayInfo/DisplayInfo.cpp
+++ b/DisplayInfo/DisplayInfo.cpp
@@ -151,7 +151,7 @@ namespace Plugin {
 
             Info(*response);
             result->ContentType = Web::MIMETypes::MIME_JSON;
-            result->Body(Core::proxy_cast<Web::IBody>(response));
+            result->Body(Core::ProxyType<Web::IBody>(response));
         } else {
             result->ErrorCode = Web::STATUS_BAD_REQUEST;
             result->Message = _T("Unsupported request for the [DisplayInfo] service.");
diff --git a/LocationSync/LocationService.cpp b/LocationSync/LocationService.cpp
index 00eb0e1..849e2ce 100644
--- a/LocationSync/LocationService.cpp
+++ b/LocationSync/LocationService.cpp
@@ -384,7 +384,7 @@ namespace Plugin {
 
             ASSERT(_infoCarrier.IsValid() == true);
 
-            element->Body<Web::IBody>(Core::proxy_cast<Web::IBody>(_infoCarrier));
+            element->Body<Web::IBody>(Core::ProxyType<Web::IBody>(_infoCarrier));
         }
     }
 
diff --git a/LocationSync/LocationSync.cpp b/LocationSync/LocationSync.cpp
index 9db75ee..9ed7494 100644
--- a/LocationSync/LocationSync.cpp
+++ b/LocationSync/LocationSync.cpp
@@ -115,7 +115,7 @@ namespace Plugin {
             response->City = location->City();
 
             result->ContentType = Web::MIMETypes::MIME_JSON;
-            result->Body(Core::proxy_cast<Web::IBody>(response));
+            result->Body(Core::ProxyType<Web::IBody>(response));
         } else if (request.Verb == Web::Request::HTTP_POST) {
             index.Next();
             if (index.Next()) {
diff --git a/Monitor/Monitor.cpp b/Monitor/Monitor.cpp
index f9402af..676c0b0 100644
--- a/Monitor/Monitor.cpp
+++ b/Monitor/Monitor.cpp
@@ -92,7 +92,7 @@ namespace Plugin {
 
                     _monitor->Snapshot(*response);
 
-                    result->Body(Core::proxy_cast<Web::IBody>(response));
+                    result->Body(Core::ProxyType<Web::IBody>(response));
                 }
             } else {
                 MetaData memoryInfo;
@@ -103,7 +103,7 @@ namespace Plugin {
 
                     *response = memoryInfo;
 
-                    result->Body(Core::proxy_cast<Web::IBody>(response));
+                    result->Body(Core::ProxyType<Web::IBody>(response));
                 }
             }
 
@@ -117,7 +117,7 @@ namespace Plugin {
 
                 *response = memoryInfo;
 
-                result->Body(Core::proxy_cast<Web::IBody>(response));
+                result->Body(Core::ProxyType<Web::IBody>(response));
             }
 
             result->ContentType = Web::MIME_JSON;
diff --git a/PlayerInfo/PlayerInfo.cpp b/PlayerInfo/PlayerInfo.cpp
index ea813ce..608fe67 100644
--- a/PlayerInfo/PlayerInfo.cpp
+++ b/PlayerInfo/PlayerInfo.cpp
@@ -175,7 +175,7 @@ namespace Plugin {
 
             Info(*response);
             result->ContentType = Web::MIMETypes::MIME_JSON;
-            result->Body(Core::proxy_cast<Web::IBody>(response));
+            result->Body(Core::ProxyType<Web::IBody>(response));
         } else {
             result->ErrorCode = Web::STATUS_BAD_REQUEST;
             result->Message = _T("Unsupported request for the [PlayerInfo] service.");
diff --git a/SystemAudioPlayer/SystemAudioPlayerImplementation.h b/SystemAudioPlayer/SystemAudioPlayerImplementation.h
index 4d25d56..7d2bc3a 100644
--- a/SystemAudioPlayer/SystemAudioPlayerImplementation.h
+++ b/SystemAudioPlayer/SystemAudioPlayerImplementation.h
@@ -83,7 +83,7 @@ namespace Plugin {
 
        public:
             static Core::ProxyType<Core::IDispatch> Create(SystemAudioPlayerImplementation *sap, Event event, string data) {
-                return (Core::proxy_cast<Core::IDispatch>(Core::ProxyType<Job>::Create(sap, event, data)));
+                return (Core::ProxyType<Core::IDispatch>(Core::ProxyType<Job>::Create(sap, event, data)));
             }
 
             virtual void Dispatch() {
diff --git a/TextToSpeech/TextToSpeechImplementation.h b/TextToSpeech/TextToSpeechImplementation.h
index 24d3523..46ed2d3 100644
--- a/TextToSpeech/TextToSpeechImplementation.h
+++ b/TextToSpeech/TextToSpeechImplementation.h
@@ -71,7 +71,7 @@ namespace Plugin {
 
        public:
             static Core::ProxyType<Core::IDispatch> Create(TextToSpeechImplementation *tts, Event event, string data) {
-                return (Core::proxy_cast<Core::IDispatch>(Core::ProxyType<Job>::Create(tts, event, data)));
+                return (Core::ProxyType<Core::IDispatch>(Core::ProxyType<Job>::Create(tts, event, data)));
             }
 
             virtual void Dispatch() {
diff --git a/TraceControl/TraceControl.cpp b/TraceControl/TraceControl.cpp
index 6b031fa..4452897 100644
--- a/TraceControl/TraceControl.cpp
+++ b/TraceControl/TraceControl.cpp
@@ -153,7 +153,7 @@ namespace Plugin {
                 }
             }
 
-            result->Body(Core::proxy_cast<Web::IBody>(response));
+            result->Body(Core::ProxyType<Web::IBody>(response));
             result->ContentType = Web::MIME_JSON;
         } else if ((request.Verb == Web::Request::HTTP_PUT) && (index.Next() == true)) {
             if ((index.Current() == _T("on")) || (index.Current() == _T("off"))) {
diff --git a/WebBridge/WebBridge.cpp b/WebBridge/WebBridge.cpp
index 7665400..e652420 100644
--- a/WebBridge/WebBridge.cpp
+++ b/WebBridge/WebBridge.cpp
@@ -239,7 +239,7 @@ namespace Plugin {
 
                     // Oke, there is someone waiting for a response!
                     message->Id = requestId;
-                    _service->Submit(channelId, Core::proxy_cast<Core::JSON::IElement>(message));
+                    _service->Submit(channelId, Core::ProxyType<Core::JSON::IElement>(message));
                 }
             }
         }
-- 
2.25.1


################################################################################
#
# thunder-clientlibraries
#
################################################################################
THUNDER_CLIENTLIBRARIES_VERSION = 0a52d5f6b2c8e42ef3ff24568d2665ac5df78a54
THUNDER_CLIENTLIBRARIES_SITE = $(call github,rdkcentral,ThunderClientLibraries,$(THUNDER_CLIENTLIBRARIES_VERSION))
THUNDER_CLIENTLIBRARIES_INSTALL_STAGING = YES
THUNDER_CLIENTLIBRARIES_DEPENDENCIES = thunder thunder-interfaces

THUNDER_CLIENTLIBRARIES_OPKG_NAME = "thunder-clientlibraries"
THUNDER_CLIENTLIBRARIES_OPKG_VERSION = "1.0.0"
THUNDER_CLIENTLIBRARIES_OPKG_ARCHITECTURE = "${BR2_ARCH}"
THUNDER_CLIENTLIBRARIES_OPKG_MAINTAINER = "Metrological"
THUNDER_CLIENTLIBRARIES_OPKG_DESCRIPTION = "Thunder clientlibraries"

THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DBUILD_REFERENCE=${THUNDER_CLIENTLIBRARIES_VERSION}

ifeq ($(BR2_CMAKE_HOST_DEPENDENCY),)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += \
       -DCMAKE_MODULE_PATH=$(HOST_DIR)/share/cmake/Modules
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_COMPOSITORCLIENT),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCOMPOSITORCLIENT=ON
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += libegl
ifeq ($(BR2_PACKAGE_THUNDER_COMPOSITOR_EXPERIMENTAL),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLUGIN_COMPOSITOR_IMPLEMENTATION=Mesa
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += libdrm mesa3d thunder-libraries
else ifeq ($(BR2_PACKAGE_WESTEROS),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLUGIN_COMPOSITOR_IMPLEMENTATION=Wayland
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLUGIN_COMPOSITOR_SUB_IMPLEMENTATION=Westeros
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += westeros
else ifeq ($(BR2_PACKAGE_WESTON),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLUGIN_COMPOSITOR_IMPLEMENTATION=Wayland
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLUGIN_COMPOSITOR_SUB_IMPLEMENTATION=Weston
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += weston
else ifeq ($(BR2_PACKAGE_HAS_NEXUS),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLUGIN_COMPOSITOR_IMPLEMENTATION=Nexus
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCOMPOSITORCLIENT_IMPLEMENTATION_REPOSITORY=git@github.com:WebPlatformForEmbedded/CompositorClient-brcm.git
ifeq ($(BR2_PACKAGE_BCM_REFSW),y)
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += bcm-refsw
endif
else ifeq ($(BR2_PACKAGE_RPI_USERLAND),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLUGIN_COMPOSITOR_IMPLEMENTATION=RPI
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += rpi-userland
# ifeq ($(BR2_PACKAGE_LIBDRM),y)
# THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DVC6=ON
# THUNDER_CLIENTLIBRARIES_DEPENDENCIES += libdrm mesa3d
# endif
else
$(error Missing a compositor implemtation, please provide one or disable BR2_PACKAGE_THUNDER_CLIENTLIBRARY_COMPOSITORCLIENT)
endif
endif

ifeq ($(BR2_PACKAGE_THUNDER_COMPOSITOR),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCOMPOSITORSERVERPLUGIN=ON
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_BLUETOOTHAUDIOSINK),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DBLUETOOTHAUDIOSINK=ON
ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_BLUETOOTHAUDIOSINK_EXAMPLEPLAYER),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DBLUETOOTHAUDIOSINK_EXAMPLEPLAYER=ON
endif
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_BLUETOOTHAUDIOSOURCE),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DBLUETOOTHAUDIOSOURCE=ON
ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_BLUETOOTHAUDIOSOURCE_EXAMPLERECORDER),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DBLUETOOTHAUDIOSOURCE_EXAMPLERECORDER=ON
endif
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_DEVICEINFO),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DDEVICEINFO=ON
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_DISPLAYINFO),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DDISPLAYINFO=ON
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_PLAYERINFO),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPLAYERINFO=ON
endif

ifeq ($(BR2_PACKAGE_THUNDER_PROVISIONPROXY),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DPROVISIONPROXY=ON
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += libprovision
endif

ifeq ($(BR2_PACKAGE_THUNDER_SECURITYAGENT_ACCESSOR),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DSECURITYAGENT=ON
endif

ifeq ($(BR2_PACKAGE_THUNDER_VIRTUALINPUT),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DVIRTUALINPUT=ON
endif

ifeq ($(BR2_PACKAGE_THUNDER_COMPOSITOR_BUFFER),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCOMPOSITORBUFFER=ON
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_CDM),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCDMI=ON
ifeq ($(BR2_PACKAGE_THUNDER_CDMI_SOFTWARE_OVERRIDE),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCDMI_ADAPTER_IMPLEMENTATION="gstreamer"
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += gstreamer1
else
ifeq ($(BR2_PACKAGE_HAS_NEXUS_SAGE),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCDMI_BCM_NEXUS_SVP=ON
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCDMI_ADAPTER_IMPLEMENTATION="broadcom-svp"
THUNDER_CLIENTLIBRARIES_DEPENDENCIES += gst1-bcm
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DOCDM_IMPLEMENTATION_REPOSITORY=git@github.com:WebPlatformForEmbedded/OCDMAdapter-brcm.git
endif
endif
endif

ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_CRYPTOGRAPHY),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCRYPTOGRAPHY=ON
ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_CRYPTOGRAPHY_IMPLEMENTATION_NEXUS),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCRYPTOGRAPHY_IMPLEMENTATION=Nexus -DOPENSSL_PLATFORM_VAULT=ON
ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_CRYPTOGRAPHY_IMPLEMENTATION_NEXUS_COMMAND_BASED),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DUSE_BROADCOM_SAGE_DRM_API=OFF
else
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DUSE_BROADCOM_SAGE_DRM_API=ON
endif
else ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_CRYPTOGRAPHY_IMPLEMENTATION_OPENSSL),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCRYPTOGRAPHY_IMPLEMENTATION=OpenSSL
ifeq ($(BR2_PACKAGE_THUNDER_PROVISIONPROXY),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DUSE_PROVISIONING=ON
endif
else ifeq ($(BR2_PACKAGE_THUNDER_CLIENTLIBRARY_CRYPTOGRAPHY_IMPLEMENTATION_THUNDER),y)
THUNDER_CLIENTLIBRARIES_CONF_OPTS += -DCRYPTOGRAPHY_IMPLEMENTATION=Thunder
else
$(error Missing a cryptography implementation)
endif
endif

$(eval $(cmake-package))

From 8e3157c11c8d2d89efe155b471c73a921193e4d8 Mon Sep 17 00:00:00 2001
From: HaseenaSainul <41037131+HaseenaSainul@users.noreply.github.com>
Date: Mon, 4 Oct 2021 15:58:22 +0530
Subject: [PATCH 11/11] wayland: patch update to handle non-overlay case

---
 ext/wayland/gstwaylandsink.c     | 57 +++++++++++++++++++++++++++++---
 ext/wayland/gstwaylandsink.h     |  2 ++
 ext/wayland/wldisplay.c          | 11 +++---
 ext/wayland/wlwindow.c           | 47 ++++++++++++++++++++------
 ext/wayland/wlwindow.h           | 14 ++++++--
 gst-libs/gst/wayland/meson.build |  5 +++
 6 files changed, 115 insertions(+), 21 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 8c6fdd0e7..74522eb44 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -63,7 +63,9 @@ enum
 {
   PROP_0,
   PROP_DISPLAY,
-  PROP_FULLSCREEN
+  PROP_FULLSCREEN,
+  PROP_WINDOW_NAME,
+  PROP_WINDOW_SET
 };
 
 GST_DEBUG_CATEGORY (gstwayland_debug);
@@ -210,6 +212,16 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
           "Whether the surface should be made fullscreen ", FALSE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  g_object_class_install_property (G_OBJECT_CLASS (klass), PROP_WINDOW_SET,
+       g_param_spec_string ("rectangle", "rectangle",
+           "Window Set Format: x,y,width,height",
+           NULL, G_PARAM_WRITABLE));
+
+  g_object_class_install_property (gobject_class, PROP_WINDOW_NAME,
+      g_param_spec_string ("window", "Wayland surface name", "Video"
+          "Surface name to be configured",
+          NULL, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
   gst_type_mark_as_plugin_api (GST_TYPE_WAYLAND_VIDEO, 0);
 }
 
@@ -272,6 +284,38 @@ gst_wayland_sink_set_property (GObject * object,
       gst_wayland_sink_set_fullscreen (sink, g_value_get_boolean (value));
       GST_OBJECT_UNLOCK (sink);
       break;
+    case PROP_WINDOW_NAME:
+      GST_OBJECT_LOCK (sink);
+      sink->window_name = g_value_dup_string (value);
+      GST_OBJECT_UNLOCK (sink);
+      break;
+    case PROP_WINDOW_SET:
+    {
+      const gchar *str= g_value_get_string(value);
+      gchar **parts= g_strsplit(str, ",", 4);
+
+      if ( !parts[0] || !parts[1] || !parts[2] || !parts[3] ) {
+        GST_ERROR( "Bad window properties string" );
+      } else {
+        int nx, ny, nw, nh;
+        nx= atoi( parts[0] );
+        ny= atoi( parts[1] );
+        nw= atoi( parts[2] );
+        nh= atoi( parts[3] );
+        if ((nx != sink->window_rect.X) ||
+            (ny != sink->window_rect.Y) ||
+            (nw != sink->window_rect.W) ||
+            (nh != sink->window_rect.H)) {
+          sink->window_rect.X= nx;
+          sink->window_rect.Y= ny;
+          sink->window_rect.W= nw;
+          sink->window_rect.H= nh;
+          if (sink->window)
+            gst_wl_window_set_render_rectangle(sink->window, nx, ny, nw, nh);
+        }
+      }
+      break;
+    }
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -295,6 +339,7 @@ gst_wayland_sink_finalize (GObject * object)
     gst_object_unref (sink->pool);
 
   g_free (sink->display_name);
+  g_free (sink->window_name);
 
   g_mutex_clear (&sink->display_lock);
   g_mutex_clear (&sink->render_lock);
@@ -397,12 +442,16 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       gst_buffer_replace (&sink->last_buffer, NULL);
       if (sink->window) {
+#if 0
         if (gst_wl_window_is_toplevel (sink->window)) {
           g_clear_object (&sink->window);
         } else {
           /* remove buffer from surface, show nothing */
           gst_wl_window_render (sink->window, NULL, NULL);
         }
+#else
+        g_clear_object (&sink->window);
+#endif
       }
       break;
     case GST_STATE_CHANGE_READY_TO_NULL:
@@ -706,8 +755,8 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
 
     if (!sink->window) {
       /* if we were not provided a window, create one ourselves */
-      sink->window = gst_wl_window_new_toplevel (sink->display,
-          &sink->video_info, sink->fullscreen, &sink->render_lock);
+      sink->window = gst_wl_window_new_toplevel (sink->display, sink->window_name,
+          &sink->video_info, sink->fullscreen, &sink->render_lock, sink->window_rect);
       g_signal_connect_object (sink->window, "closed",
           G_CALLBACK (on_window_closed), sink, 0);
     }
@@ -1052,7 +1101,7 @@ plugin_init (GstPlugin * plugin)
 
   gst_wl_shm_allocator_register ();
 
-  return gst_element_register (plugin, "waylandsink", GST_RANK_MARGINAL,
+  return gst_element_register (plugin, "waylandsink", GST_RANK_PRIMARY,
       GST_TYPE_WAYLAND_SINK);
 }
 
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index be92fe7f2..608140b79 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -61,7 +61,9 @@ struct _GstWaylandSink
   gboolean video_info_changed;
   GstVideoInfo video_info;
   gboolean fullscreen;
+  GstWindowRect window_rect;
 
+  gchar *window_name;
   gchar *display_name;
 
   gboolean redraw_pending;
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
index 0bb9dc729..be3a660e8 100644
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -67,6 +67,12 @@ gst_wl_display_finalize (GObject * gobject)
   if (self->thread)
     g_thread_join (self->thread);
 
+  wl_display_roundtrip_queue (self->display, self->queue);
+
+  if (self->queue) {
+    wl_event_queue_destroy (self->queue);
+  }
+
   /* to avoid buffers being unregistered from another thread
    * at the same time, take their ownership */
   g_mutex_lock (&self->buffers_mutex);
@@ -114,9 +120,6 @@ gst_wl_display_finalize (GObject * gobject)
   if (self->display_wrapper)
     wl_proxy_wrapper_destroy (self->display_wrapper);
 
-  if (self->queue)
-    wl_event_queue_destroy (self->queue);
-
   if (self->own_display) {
     wl_display_flush (self->display);
     wl_display_disconnect (self->display);
@@ -278,6 +281,7 @@ gst_wl_display_thread_run (gpointer data)
     }
     if (wl_display_read_events (self->display) == -1)
       goto error;
+
     wl_display_dispatch_queue_pending (self->display, self->queue);
   }
 
@@ -371,7 +375,6 @@ gst_wl_display_new_existing (struct wl_display * display,
     g_warning ("Could not bind to either wl_shell, xdg_wm_base or "
         "zwp_fullscreen_shell, video display may not work properly.");
   }
-
   self->thread = g_thread_try_new ("GstWlDisplay", gst_wl_display_thread_run,
       self, &err);
   if (err) {
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index 66a05be97..69382eb28 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -204,8 +204,11 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
   window->video_surface_wrapper =
       wl_proxy_create_wrapper (window->video_surface);
 
-  wl_proxy_set_queue ((struct wl_proxy *) window->area_surface_wrapper,
-      display->queue);
+  if (window->display->own_display) {
+    wl_proxy_set_queue ((struct wl_proxy *) window->area_surface_wrapper,
+          display->queue);
+  }
+
   wl_proxy_set_queue ((struct wl_proxy *) window->video_surface_wrapper,
       display->queue);
 
@@ -216,8 +219,14 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
   wl_subsurface_set_desync (window->video_subsurface);
 
   if (display->viewporter) {
-    window->area_viewport = wp_viewporter_get_viewport (display->viewporter,
-        window->area_surface);
+    if (window->display->own_display) {
+      window->area_viewport = wp_viewporter_get_viewport (display->viewporter,
+      window->area_surface);
+    } else
+    {
+      window->area_viewport = NULL;
+      wl_subsurface_place_below(window->video_subsurface, window->area_surface);
+    }
     window->video_viewport = wp_viewporter_get_viewport (display->viewporter,
         window->video_surface);
   }
@@ -255,8 +264,8 @@ gst_wl_window_ensure_fullscreen (GstWlWindow * window, gboolean fullscreen)
 }
 
 GstWlWindow *
-gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
-    gboolean fullscreen, GMutex * render_lock)
+gst_wl_window_new_toplevel (GstWlDisplay * display, const gchar * name, const GstVideoInfo * info,
+    gboolean fullscreen, GMutex * render_lock, GstWindowRect window_rect)
 {
   GstWlWindow *window;
 
@@ -286,6 +295,9 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
         &xdg_toplevel_listener, window);
 
     gst_wl_window_ensure_fullscreen (window, fullscreen);
+    if (name) {
+      xdg_toplevel_set_title(window->xdg_toplevel, name);
+    }
 
     /* Finally, commit the xdg_surface state as toplevel */
     window->configured = FALSE;
@@ -330,7 +342,11 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
     /* set the initial size to be the same as the reported video size */
     gint width =
         gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
-    gst_wl_window_set_render_rectangle (window, 0, 0, width, info->height);
+    if (window_rect.W || window_rect.H) {
+        gst_wl_window_set_render_rectangle (window, 0, 0, window_rect.W, window_rect.H);
+    } else {
+        gst_wl_window_set_render_rectangle (window, 0, 0, width, info->height);
+    }
   }
 
   return window;
@@ -355,6 +371,11 @@ gst_wl_window_new_in_surface (GstWlDisplay * display,
 
   wl_surface_commit (parent);
 
+  wl_surface_commit (parent);
+
+  wl_subsurface_place_below(window->area_subsurface, parent);
+  wl_surface_commit (parent);
+
   return window;
 }
 
@@ -414,12 +435,13 @@ gst_wl_window_resize_video_surface (GstWlWindow * window, gboolean commit)
 
   if (gst_wl_window_is_toplevel (window)) {
     struct wl_region *region;
-
+#if 1
     region = wl_compositor_create_region (window->display->compositor);
     wl_region_add (region, 0, 0, window->render_rectangle.w,
         window->render_rectangle.h);
     wl_surface_set_input_region (window->area_surface, region);
     wl_region_destroy (region);
+#endif    
   }
 
   /* this is saved for use in wl_surface_damage */
@@ -459,7 +481,8 @@ gst_wl_window_render (GstWlWindow * window, GstWlBuffer * buffer,
 
     wl_subsurface_set_sync (window->video_subsurface);
     gst_wl_window_resize_video_surface (window, FALSE);
-    gst_wl_window_set_opaque (window, info);
+    if (window->display->own_display)
+      gst_wl_window_set_opaque (window, info);
   }
 
   if (G_LIKELY (buffer)) {
@@ -546,12 +569,14 @@ gst_wl_window_set_render_rectangle (GstWlWindow * window, gint x, gint y,
   window->render_rectangle.h = h;
 
   /* position the area inside the parent - needs a parent commit to apply */
-  if (window->area_subsurface)
+  if (window->area_subsurface) {
     wl_subsurface_set_position (window->area_subsurface, x, y);
+  }
 
   /* change the size of the area */
-  if (window->area_viewport)
+  if (window->area_viewport) {
     wp_viewport_set_destination (window->area_viewport, w, h);
+  }
 
   gst_wl_window_update_borders (window);
 
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index c3f017216..c48e0e644 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -36,6 +36,15 @@ G_BEGIN_DECLS
 
 typedef struct _GstWlWindow GstWlWindow;
 typedef struct _GstWlWindowClass GstWlWindowClass;
+typedef struct _GstWindowRect GstWindowRect;
+
+struct _GstWindowRect
+{
+  gint X;
+  gint Y;
+  gint W;
+  gint H;
+};
 
 struct _GstWlWindow
 {
@@ -83,8 +92,9 @@ GType gst_wl_window_get_type (void);
 
 void gst_wl_window_ensure_fullscreen (GstWlWindow * window,
         gboolean fullscreen);
-GstWlWindow *gst_wl_window_new_toplevel (GstWlDisplay * display,
-        const GstVideoInfo * info, gboolean fullscreen, GMutex * render_lock);
+GstWlWindow *gst_wl_window_new_toplevel (GstWlDisplay * display, const gchar * name,
+        const GstVideoInfo * info, gboolean fullscreen, GMutex * render_lock, GstWindowRect window_rect);
+
 GstWlWindow *gst_wl_window_new_in_surface (GstWlDisplay * display,
         struct wl_surface * parent, GMutex * render_lock);
 
diff --git a/gst-libs/gst/wayland/meson.build b/gst-libs/gst/wayland/meson.build
index 89bc6ab57..2d69b7731 100644
--- a/gst-libs/gst/wayland/meson.build
+++ b/gst-libs/gst/wayland/meson.build
@@ -21,4 +21,9 @@ if use_wayland
   gstwayland_dep = declare_dependency(link_with : gstwayland,
     include_directories : [libsinc],
     dependencies : [gst_dep, gstvideo_dep])
+
+  gstwayland_headers = [
+  'wayland.h',
+  ]
+  install_headers(gstwayland_headers, subdir : 'gstreamer-' + api_version + '/gst/wayland/')
 endif
-- 
2.34.1


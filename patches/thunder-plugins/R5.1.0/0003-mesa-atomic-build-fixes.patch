--- a/Compositor/lib/Mesa/backend/src/DRM/Atomic.cpp
+++ b/Compositor/lib/Mesa/backend/src/DRM/Atomic.cpp
@@ -39,12 +39,13 @@
             Request(const Request&) = delete;
             Request& operator= (const Request&) = delete;
 
-            Request(const uint32_t /* flags */)
-                : _request(drmModeAtomicAlloc()) {
+            Request(const uint32_t flags)
+                : _flags(flags)
+                , _request(drmModeAtomicAlloc()) {
             }
             ~Request() {
                 if (_request != nullptr) {
-                    drmModeAtomicFree(request);
+                    drmModeAtomicFree(_request);
                 }
             }
 
@@ -59,13 +60,13 @@
              */
             uint32_t AddProperty(uint32_t objectId, uint32_t propertyId, uint64_t value)
             {
-                int result();
+                int result = 0;
 
-                if ((request != nullptr) && (result = drmModeAtomicAddProperty(_request, objectId, propertyId, value) < 0)) {
-                    TRACE(Trace::Error, "Failed to add atomic DRM property %u: %s", propertyId, strerror(-request));
+                if ((_request != nullptr) && (result = drmModeAtomicAddProperty(_request, objectId, propertyId, value) < 0)) {
+                    TRACE(Trace::Error, (_T("Failed to add atomic DRM property %u: %s"), propertyId, strerror(result)));
                 }
 
-                return (result == 0) ? Core::ERROR_NONE : Core::ERROR_GENERIC;
+                return (result == 0) ? Core::ERROR_NONE : Core::ERROR_GENERAL;
             }
 
             /**
@@ -77,18 +78,18 @@
              */
             uint32_t Commit(int fd, void* userData)
             {
-                int result();
+                int result = 0;
 
-                if (result = drmModeAtomicCommit(fd, _request, _flags, userData) < 0) {
-                    TRACE(Trace::Error, "Atomic commit failed: %s", strerror(-request));
+                if ((result = drmModeAtomicCommit(fd, _request, _flags, userData)) < 0) {
+                    TRACE(Trace::Error, (_T("Atomic commit failed: %s"), strerror(result)));
                 }
 
-                return (result == 0) ? Core::ERROR_NONE : Core::ERROR_GENERIC;
+                return (result == 0) ? Core::ERROR_NONE : Core::ERROR_GENERAL;
             }
 
         private:
             const uint32_t _flags;
-            drmModeAtomicReqPtr* _request
+            drmModeAtomicReqPtr _request;
         };
 
     public:
@@ -107,10 +108,10 @@
 
         uint32_t Commit(const int fd, const IConnector* connector, const uint32_t flags, void* userData) override
         {
-            ASSERT(connector->drmFd > 0);
+            ASSERT(connector != nullptr && fd > 0);
 
             // switch on the Atomic API.
-            int setAtomic = drmSetClientCap(connector->CardFd(), DRM_CLIENT_CAP_ATOMIC, 1);
+            int VARIABLE_IS_NOT_USED setAtomic = drmSetClientCap(fd, DRM_CLIENT_CAP_ATOMIC, 1);
             ASSERT(setAtomic == 0);
  
             ASSERT((data.Flags & ~DRM_MODE_PAGE_FLIP_FLAGS) == 0); // only allow page flip flags
@@ -119,7 +120,7 @@
 
             ASSERT(request.operator->() == nullptr);
 
-            request->AddProperty(connectorId, "CRTC_ID", crtcId);
+            request->AddProperty(connector->ConnectorId(), connector->DpmsPropertyId(), connector->CtrControllerId());
 
             request->Commit(fd, userData);
 
